type Query {
  hello: String
  findUsers: [User]!
  findCompanies: [Company]!
  findTasks: [Task]!
  findProjects: [Project]!
  auth(email: String!, password: String!): Auth
}

type Mutation {
  createUser(user: UserInput): User
  updateUser(user: UserInput): User
  deleteUser(id: Int): User
  assignUserToTask(data: AssignUserToTask): UserTask
  retainUserFromTask(data: AssignUserToTask): UserTask
  addUserToProject(data: AddUserToProject): UserProject
  removeUserFromProject(data: AddUserToProject): UserProject
  createCompany(company: CompanyInput): Company
  updateCompany(company: CompanyInput): Company
  deleteCompany(id: Int): Company
  createProject(project: ProjectInput): Project
  updateProject(project: ProjectInput): Project
  deleteProject(id: Int): Project
  createTask(task: TaskInput): Task
  updateTask(task: TaskInput): Task
  deleteTask(id: Int): Task
}

input UserInput {
  id: Int
  company_id: Int
  firstname: String!
  lastname: String!
  email: String!
  password: String
}

input AssignUserToTask {
  id: Int
  user_id: Int!
  task_id: Int!
}

input AddUserToProject {
  id: Int
  user_id: Int!
  project_id: Int!
  role: String!
}

input CompanyInput {
  name: String!
  id: Int
}

input ProjectInput {
  company_id: Int!
  name: String!
  id: Int
}

input TaskInput {
  id: Int
  project_id: Int!
  name: String!
  status: String!
}

type Auth {
  token: String!
}

type User {
  id: Int!
  company_id: Int
  firstname: String!
  lastname: String!
  company: Company
  project: [Project!]
  email: String!
  password: String
}

type UserProject {
  id: Int!
  user_id: Int!
  project_id: Int!
  role: String!
}

type UserTask {
  id: Int!
  user_id: Int!
  task_id: Int!
}

type Company {
  id: Int!
  owner_id: Int
  name: String!
  owner: User
  users: [User!]
}

type Project {
  id: Int!
  company_id: Int!
  name: String!
  company: Company
  users: [User!]
}

type Task {
  id: Int!
  project_id: Int!
  name: String!
  status: String!
  project: Project
}
